{"version":3,"sources":["../../../frontend/starter-frontend/src/store/reducers/currentUser.js","../../../frontend/starter-frontend/src/store/reducers/index.js","../../../frontend/starter-frontend/src/store/actionTypes.js","../../../frontend/starter-frontend/src/store/reducers/errors.js","../../../frontend/starter-frontend/src/containers/App.js","../../../frontend/starter-frontend/src/store/index.js","../../../frontend/starter-frontend/src/registerServiceWorker.js","../../../frontend/starter-frontend/src/index.js"],"names":["DEFAULT_STATE","isAuthenticated","user","rootReducer","combineReducers","currentUser","state","arguments","length","undefined","action","type","Object","keys","errors","message","objectSpread","error","store","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","App","react_default","a","createElement","es","react_router_dom_es","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","containers_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qNAEMA,EAAgB,CACpBC,iBAAiB,EACjBC,KAAM,YCKOC,EALKC,YAAgB,CAClCC,YDEa,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BP,EAAeU,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,OAAQC,EAAOC,MACb,IEP4B,mBFQ1B,MAAO,CAELV,gBAAiBW,OAAOC,KAAKH,EAAOR,MAAMM,OAAS,EACnDN,KAAMQ,EAAOR,MAEjB,QACE,OAAOI,ICVXQ,OEJa,WAAuC,IAAtCR,EAAsCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9B,CAAEQ,QAAS,MAAQL,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,IDJqB,YCKnB,OAAOC,OAAAI,EAAA,EAAAJ,CAAA,GAAKN,EAAZ,CAAmBS,QAASL,EAAOO,QACrC,IDLwB,eCMtB,OAAOL,OAAAI,EAAA,EAAAJ,CAAA,GAAKN,EAAZ,CAAmBS,QAAS,OAC9B,QACE,OAAOT,mCCJPY,ECAUC,YACZhB,EACAiB,YACEC,YAAgBC,KAChBC,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAAAC,GAAC,OAAIA,KDMpDC,EARH,kBACVC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAUZ,MAAOA,GACfS,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,2CEAAG,EAAcC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfiC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAlC,GACLgC,QAAQhC,MAAM,4CAA6CA,KCzEjEmC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,GAAwBnC,OAAOW,UAC3CyB,SAAWpC,OAAOW,SAASyB,OAIvC,OAGFpC,OAAOqC,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAuB,OAAMH,GAAN,sBAEP1B,GAiDV,SAAiCM,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BnB,OAAOW,SAASoC,aAKpBjC,EAAgBC,KAGnBa,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjCO,QAAQC,IACN,+GAMJb,EAAgBC,MCzCxBkC","file":"static/js/main.60a372c8.chunk.js","sourcesContent":["import { SET_CURRENT_USER } from \"../actionTypes\";\n\nconst DEFAULT_STATE = {\n  isAuthenticated: false,\n  user: {} // user info when logged in\n};\n\nexport default (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n    case SET_CURRENT_USER:\n      return {\n        // turn empty object into false or if there are keys, true\n        isAuthenticated: Object.keys(action.user).length > 0,\n        user: action.user\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport currentUser from \"./currentUser\";\nimport errors from \"./errors\";\n\nconst rootReducer = combineReducers({\n  currentUser,\n  errors\n});\n\nexport default rootReducer;\n","export const ADD_ERROR = \"ADD_ERROR\";\nexport const REMOVE_ERROR = \"REMOVE_ERROR\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";\n","import { ADD_ERROR, REMOVE_ERROR } from \"../actionTypes\";\n\nexport default (state = { message: null }, action) => {\n  switch (action.type) {\n    case ADD_ERROR:\n      return { ...state, message: action.error };\n    case REMOVE_ERROR:\n      return { ...state, message: null };\n    default:\n      return state;\n  }\n};\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"../store\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <h1>Hello World from frontend!</h1>\n    </Router>\n  </Provider>\n);\n\nexport default App;\n","import rootReducer from \"./reducers\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\"; // for async functions\n\nexport function configureStore() {\n  const store = createStore(\n    rootReducer,\n    compose(\n      applyMiddleware(thunk),\n      window.devToolsExtension ? window.devToolsExtension() : f => f\n    )\n  );\n\n  return store;\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}